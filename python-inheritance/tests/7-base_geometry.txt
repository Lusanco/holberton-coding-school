The "7-base_geometry" doctest
========================

Imports "BaseGeometry" class from "7-base_geometry"
Test integer_validator method

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

>>> try:
...     bg.area()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented

>>> try:
...     bg.integer_validator("large_number", 10**10)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] large_number must be greater than 0

>>> try:
...     bg.integer_validator("negative_large_number", -10**10)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] negative_large_number must be greater than 0

>>> try:
...     bg.integer_validator("zero", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] zero must be greater than 0

>>> try:
...     bg.integer_validator("zero_string", "0")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] zero_string must be an integer

>>> try:
...     bg.integer_validator("float_number", 3.14)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] float_number must be an integer

>>> try:
...     bg.integer_validator("boolean_value", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] boolean_value must be an integer